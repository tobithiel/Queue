Queue
- thread-safe
- ability to define max number of elements
- sort elements into queue
- get in O(1), except when filtered (worst case O(n))
- put in O(1) when unsorted, in O(n) in the worst case when sorted
- MIT license (windows support relies on LGPL licensed pthreads-win32 (http://sourceware.org/pthreads-win32/))

sorted queue:
  your elements in the queue will be ordered according to the sort function which is given.

Build steps:
- mkdir build && cd build
- cmake ..
- make / build VS project under windows

Building 32-/64-bit:
- OS X: universal binaries are built
- Linux: use 'cmake -DBUILT_32=ON ..' to force 32-bit built, -DBUILT_64=ON for 64-bit
- Windows: use 'cmake -G "Visual Studio 11 Win64" -DBUILT_64=ON ..' to force a 64-bit build, 'cmake -G "Visual Studio 11" -DBUILT_32=ON ..' for 32-bit

TODO:
- proper test suite, so that everybody can easily see whats tested and run the tests himself
- ability to turn of element counting => only unlimited queue
- function to peek at next element

error codes:
 < 0 => error
 = 0 => okay

 0 - everything alright

-1 - invalid queue
-2 - could not acquire lock
-3 - could not allocate memory
-4 - no new data allowed
-5 - invalid element in queue
-6 - invalid callback
-7 - max_elements reached or no elements in queue

PROGRAM

#include<stdio.h>
#include<stdlib.h>

#define MAX_SIZE 100

int main() {
    int item, choice, i;
    int arr_queue[MAX_SIZE];
    int rear = 0;
    int front = 0;
    int exit = 1;

    
    do {
        printf("\n\n Queue Main Menu");

        printf("\n1.Insert \n2.Remove \n3.Display \nOthers to exit");
        printf("\nEnter Your Choice : ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                if (rear == MAX_SIZE)
                    printf("\n## Queue Reached Max!!");
                else {
                    printf("\nEnter The Value to be Insert : ");
                    scanf("%d", &item);
                    printf("\n## Position : %d , Insert Value  : %d ", rear + 1, item);
                    arr_queue[rear++] = item;
                }
                break;
            case 2:
                if (front == rear)
                    printf("\n## Queue is Empty!");
                else {
                    printf("\n## Position : %d , Remove Value  : %d ", front, arr_queue[front]);
                    front++;
                }
                break;
            case 3:
                printf("\n## Queue Size : %d ", rear);
                for (i = front; i < rear; i++)
                    printf("\n## Position : %d , Value  : %d ", i, arr_queue[i]);
                break;
            default:
                exit = 0;
                break;
        }
    } while (exit);

    return 0;
}

